KCPSM3 Assembler log file for program 'programm.psm'.
Generated by KCPSM3 version 1.30
Ken Chapman (Xilinx Ltd) 2005.
09Nov2019-16:39:43

 Addr Code

 000                         CONSTANT IO_Port, 00
 000                         CONSTANT LED0, 01
 000                         CONSTANT LED1, 02
 000                         CONSTANT BNT0, 04
 000                         CONSTANT COM_Port, 01
 000                         CONSTANT TXD, 01
 000                         CONSTANT RXD, 01
 000                         CONSTANT ACONST, 42
 000                         CONSTANT SIXTEEN, 10
 000                         CONSTANT EIGHT, 08
 000                         ; Register Mapping
 000                         ; alle acht Register s0 bis s7 stehen der ISR zur Verfuegung
 000                         NAMEREG s0, IOR
 000                         NAMEREG s1, TMP
 000                         NAMEREG s2, CNTH
 000                         NAMEREG s3, CNTL
 000                         NAMEREG s6, CNTR16
 000                         ; alle acht Register s8 bis sF stehen der Main-Funktion zur Verfuegung
 000                         NAMEREG s8, CNT16
 000                         NAMEREG s9, CNT8
 000                         NAMEREG sA, DATA
 000                         NAMEREG sB, READ_REG
 000                         NAMEREG sC, STATEWRITE
 000                         NAMEREG sD, STATEREAD
 000                         NAMEREG sE, READY_TO_WRITE
 000                         NAMEREG sF, CNTR8
 000                         ; --------------------------------------------------------------------------------------------
 000                         ADDRESS 000
 000                         ; Hauptfunktion
 000  0A200           start: AND CNTH[s2], 00               ; Initialisierung der Zaehlers ...
 001  0A300                  AND CNTL[s3], 00               ; in der ISR
 002  00C00                  LOAD STATEWRITE[sC], 00        ; Setzt Zustand auf 0
 003  00E01                  LOAD READY_TO_WRITE[sE], 01    ; Write-Erlaubnis sperren
 004  00810                  LOAD CNT16[s8], SIXTEEN[10]    ; Taktzähler auf 16 setzen
 005  00908                  LOAD CNT8[s9], EIGHT[08]       ; Bitzähler auf 8 setzen
 006  00610                  LOAD CNTR16[s6], SIXTEEN[10]   ; Taktzähler auf 16 setzen
 007  00F08                  LOAD CNTR8[sF], EIGHT[08]      ; Bitzähler auf 8 setzen
 008  3C001                  ENABLE INTERRUPT
 009                   loop: ; do nothing
 009  34009                  JUMP loop[009]
 00A                         ; --------------------------------------------------------------------------------------------
 00A                         ; Subroutine, die den Zustand des Buttons BTN0 auf die Leuchtdiode LED0 durchschaltet
 00A               BNT0LED0: 
 00A  04000                  INPUT IOR[s0], IO_Port[00]     ; IO-Port einlesen
 00B  04100                  INPUT TMP[s1], IO_Port[00]     ; IO-Port einlesen
 00C  0A104                  AND TMP[s1], BNT0[04]          ; Zustand von BNT0 ermitteln
 00D  2010E                  SR0 TMP[s1]                    ; auf die Position ...
 00E  2010E                  SR0 TMP[s1]                    ; ... von LED0 verschieben
 00F  0A002                  AND IOR[s0], LED1[02]          ; Zustand von LED1 ermitteln
 010  0D010                  OR IOR[s0], TMP[s1]            ; LED1 mit BNT0 konkatinieren
 011  2C000                  OUTPUT IOR[s0], IO_Port[00]    ; den neuen Wert ueber IO-Port ausgeben
 012  2A000                  RETURN
 013                         ; --------------------------------------------------------------------------------------------
 013                         ; Subroutine, die die Leuchtdione LED1 mit ca. 1 Hz blinken laesst
 013  18301           BLINK: ADD CNTL[s3], 01               ; den 16-Bit-Zaehler ...
 014  1A200                  ADDCY CNTH[s2], 00             ; .. inkrementieren
 015  35C19                  JUMP NC, BLINK0[019]           ; kein Ueberlauf -> exit, sonst
 016  04000                  INPUT IOR[s0], IO_Port[00]     ; IO-Port einlesen
 017  0E002                  XOR IOR[s0], LED1[02]          ; LED1 toggeln
 018  2C000                  OUTPUT IOR[s0], IO_Port[00]    ; den neuen Wert ueber IO-Port ausgeben
 019  2A000          BLINK0: RETURN
 01A                         ; --------------------------------------------------------------------------------------------
 01A                         ; Subroutine, die Daten ueber das serielle Eingangssignal RXD abtastet,
 01A                         ; zu einem Byte zusammensetzt, entschidet, ob das empfangene Byte
 01A                         ; ein Buchstabe oder eine Ziffer ist, und ggf. das Byte seriell
 01A                         ; ueber das serielle Ausgangssignal TXD ausgibt
 01A                         ;
 01A                         ; in dieser Version ist eine einfache Echo-Funktion implementiert
 01A                         ;COMM:
 01A                         ;        RETURN
 01A                         ; --------------------------------------------------------------------------------------------
 01A                         ; Subroutine, die Daten in das Ausgangsportal TXD schreibt
 01A                  WRITE: 
 01A  14E00                  COMPARE READY_TO_WRITE[sE], 00
 01B  2B400                  RETURN NZ
 01C  14C00                  COMPARE STATEWRITE[sC], 00
 01D  35023                  JUMP Z, WRITE_STARTBIT[023]
 01E  14C01                  COMPARE STATEWRITE[sC], 01
 01F  3502A                  JUMP Z, WRITE_DATA[02A]
 020  14C02                  COMPARE STATEWRITE[sC], 02
 021  35034                  JUMP Z, WRITE_STOPBIT[034]
 022  3403C                  JUMP WRITE_IDLE[03C]
 023                         ; --------------------------------------------------------------------------------------------
 023         WRITE_STARTBIT: 
 023  1C801                  SUB CNT16[s8], 01
 024  2B400                  RETURN NZ
 025  00810                  LOAD CNT16[s8], SIXTEEN[10]    ;Zaehler zurücksetzen         ; 16 Takte abwarten
 026  0A000                  AND IOR[s0], 00
 027  2C001                  OUTPUT IOR[s0], COM_Port[01]
 028  00C01                  LOAD STATEWRITE[sC], 01
 029  2A000                  RETURN
 02A                         ; --------------------------------------------------------------------------------------------
 02A             WRITE_DATA: 
 02A  1C801                  SUB CNT16[s8], 01
 02B  2B400                  RETURN NZ
 02C  00810                  LOAD CNT16[s8], SIXTEEN[10]    ;Zaehler zurücksetzen         ; 16 Takte abwarten
 02D  2CA01                  OUTPUT DATA[sA], COM_Port[01]  ; Datenregister auf Output setzen
 02E  20A0E                  SR0 DATA[sA]
 02F  1C901                  SUB CNT8[s9], 01               ; Daten bitweise herausschreiben
 030  2B400                  RETURN NZ
 031  00908                  LOAD CNT8[s9], EIGHT[08]       ; Zaehler zurücksetzen
 032  00C02                  LOAD STATEWRITE[sC], 02
 033  2A000                  RETURN
 034                         ; --------------------------------------------------------------------------------------------
 034          WRITE_STOPBIT: 
 034  1C801                  SUB CNT16[s8], 01
 035  2B400                  RETURN NZ
 036  00810                  LOAD CNT16[s8], SIXTEEN[10]    ;Zaehler zurücksetzen
 037  00001                  LOAD IOR[s0], 01
 038  2C001                  OUTPUT IOR[s0], COM_Port[01]
 039  00C03                  LOAD STATEWRITE[sC], 03
 03A  00E01                  LOAD READY_TO_WRITE[sE], 01    ;Schreibsperre aktivieren
 03B  2A000                  RETURN
 03C                         ; --------------------------------------------------------------------------------------------
 03C             WRITE_IDLE: 
 03C  00C00                  LOAD STATEWRITE[sC], 00
 03D  2A000                  RETURN
 03E                         ; --------------------------------------------------------------------------------------------
 03E                   READ: 
 03E  14D00                  COMPARE STATEREAD[sD], 00
 03F  3505E                  JUMP Z, READ_STARTBIT[05E]
 040  14D01                  COMPARE STATEREAD[sD], 01
 041  35045                  JUMP Z, READ_DATA[045]
 042  14D02                  COMPARE STATEREAD[sD], 02
 043  35066                  JUMP Z, READ_STOPBIT[066]
 044  34076                  JUMP READ_IDLE[076]
 045                         ; --------------------------------------------------------------------------------------------
 045              READ_DATA: 
 045  1C601                  SUB CNTR16[s6], 01
 046  2B400                  RETURN NZ
 047  00610                  LOAD CNTR16[s6], SIXTEEN[10]
 048  04001                  INPUT IOR[s0], COM_Port[01]
 049  0DB00                  OR READ_REG[sB], IOR[s0]
 04A  20B0C                  RR READ_REG[sB]                ; Inhalt des Read-Registers nach links verschieben
 04B  1CF01                  SUB CNTR8[sF], 01              ; Daten bitweise herausschreiben
 04C  2B400                  RETURN NZ
 04D  00F08                  LOAD CNTR8[sF], EIGHT[08]      ; Zaehler zurücksetzen
 04E  00D02                  LOAD STATEREAD[sD], 02
 04F                         ; change state
 04F  2A000                  RETURN
 050                         ; --------------------------------------------------------------------------------------------
 050            CHECK_GROSS: 
 050  14B5B                  COMPARE READ_REG[sB], 5B       ; ist es größer als 5A?
 051  35C76                  JUMP NC, READ_IDLE[076]
 052  14B41                  COMPARE READ_REG[sB], 41       ; ist es kleiner als 41?
 053  35858                  JUMP C, CHECK_ZAHL[058]
 054  00D03                  LOAD STATEREAD[sD], 03
 055  01AB0                  LOAD DATA[sA], READ_REG[sB]    ; Inhalt des Leseregisters ins Schreibregister laden
 056  00E00                  LOAD READY_TO_WRITE[sE], 00    ;Schreibsperre aufheben
 057  2A000                  RETURN
 058                         ; --------------------------------------------------------------------------------------------
 058             CHECK_ZAHL: 
 058  14B3A                  COMPARE READ_REG[sB], 3A       ; ist es größer als 39
 059  35C76                  JUMP NC, READ_IDLE[076]
 05A  00D03                  LOAD STATEREAD[sD], 03
 05B  01AB0                  LOAD DATA[sA], READ_REG[sB]    ; Inhalt des Leseregisters ins Schreibregister laden
 05C  0AE00                  AND READY_TO_WRITE[sE], 00     ;Schreibsperre aufheben
 05D  2A000                  RETURN
 05E                         ; --------------------------------------------------------------------------------------------
 05E          READ_STARTBIT: 
 05E  04001                  INPUT IOR[s0], COM_Port[01]
 05F  14000                  COMPARE IOR[s0], 00
 060  2B400                  RETURN NZ
 061  1CF01                  SUB CNTR8[sF], 01
 062  2B400                  RETURN NZ
 063  00F08                  LOAD CNTR8[sF], EIGHT[08]
 064  00D01                  LOAD STATEREAD[sD], 01
 065  2A000                  RETURN
 066                         ; --------------------------------------------------------------------------------------------
 066           READ_STOPBIT: 
 066  1C601                  SUB CNTR16[s6], 01
 067  2B400                  RETURN NZ
 068  00610                  LOAD CNTR16[s6], SIXTEEN[10]   ;Zaehler zurücksetzen
 069  04001                  INPUT IOR[s0], COM_Port[01]
 06A  14001                  COMPARE IOR[s0], 01
 06B  2B400                  RETURN NZ
 06C                         ; Bereich einschränken
 06C  14B30                  COMPARE READ_REG[sB], 30       ;ist es kleiner als #30?
 06D  35876                  JUMP C, READ_IDLE[076]
 06E  14B7B                  COMPARE READ_REG[sB], 7B       ;ist es größer als #7A?
 06F  35C76                  JUMP NC, READ_IDLE[076]
 070                         ; Kleinbuchstabe
 070  14B61                  COMPARE READ_REG[sB], 61
 071  35850                  JUMP C, CHECK_GROSS[050]
 072  00D03                  LOAD STATEREAD[sD], 03
 073  01AB0                  LOAD DATA[sA], READ_REG[sB]    ; Inhalt des Leseregisters ins Schreibregister laden
 074  0AE00                  AND READY_TO_WRITE[sE], 00     ;Schreibsperre aufheben
 075  2A000                  RETURN
 076                         ; --------------------------------------------------------------------------------------------
 076              READ_IDLE: 
 076  00F08                  LOAD CNTR8[sF], EIGHT[08]      ; Zaehler zurücksetzen
 077  00610                  LOAD CNTR16[s6], SIXTEEN[10]   ;Zaehler zurücksetzen
 078  0AD00                  AND STATEREAD[sD], 00
 079  0AB00                  AND READ_REG[sB], 00
 07A  2A000                  RETURN
 07B                         ; --------------------------------------------------------------------------------------------
 300                         ADDRESS 300
 300                         ; Interrupt-Service-Routine
 300  3000A             ISR: CALL BNT0LED0[00A]
 301  30013                  CALL BLINK[013]
 302  3003E                  CALL READ[03E]
 303  3001A                  CALL WRITE[01A]
 304  38001                  RETURNI ENABLE
 305                         ; --------------------------------------------------------------------------------------------
 305                         ; Interrupt-Vektor
 3FF                         ADDRESS 3FF
 3FF  34300                  JUMP ISR[300]
